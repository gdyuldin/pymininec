Lines     Entry  Description
   1-  26    1   Start, variable initialization, array dim
                 Jumps to 1497 (GOTO)
  27-  53   28   KERNEL EVALUATION OF INTEGRALS I2 & I3
  54-  65   56   PSI(P1,P2,P3) = T1 + J * T2
                 ENTRIES REQUIRED FOR NEAR FIELD CALCULATION
                 Prepare (X1, Y1, Z1), (X2, Y2, Z2), (V1, V2, V3)
                 Then jumps (GOTO) to 135 in the middle of PSI
  66-  74   66   Another PSI entry point used in near field
                 Then jumps (GOTO) to 135 in the middle of PSI
  75-  83   75   Another PSI entry point used in near field
                 Then jumps (GOTO) to 135 in the middle of PSI
  84-  99   87   ENTRIES REQUIRED FOR IMPEDANCE MATRIX CALCULATION
                 S(M) GOES IN (X1,Y1,Z1) FOR SCALAR POTENTIAL
                 MOD FOR SMALL RADIUS TO WAVE LENGTH RATIO
                 Then jumps (GOTO) to 113 in the middle of PSI
                 One return at 93 or GOTO 113
 100- 181  102   Compute PSI
                 S(M) GOES IN (X1,Y1,Z1) FOR VECTOR POTENTIAL
                 MOD FOR SMALL RADIUS TO WAVE LENGTH RATIO
                 Then continues to 113 in the middle of PSI
           113   Prepare (X2, Y2, Z3), (V1, V2, V3)
                 Then continue at 135 (GOTO) for PSI
           135   PSI computation from
                 (X1, Y1, Z1), (X2, Y2, Z3), (V1, V2, V3)
 182- 194  184   COMPLEX SQUARE ROOT [now uses numpy]
                 W6+I*W7=SQR(Z6+I*Z7)
 195- 495  196   IMPEDANCE MATRIX CALCULATION
           342   ADDITION OF LOADS (jumps to 477 if no load)
           377   IMPEDANCE MATRIX FACTORIZATION
           428   SOLVE / COMPUTE RIGHT HAND SIDE
           477   SOURCE DATA (printing of sources)
                 This all uses the global FLG to determine what part(s)
                 of the matrix calculation need to be performed.
                 The flag is set to 0 on change of frequency, change
                 of loads, or change of wires.
                 if FLG is 1, only right hand sides are computed, if FLG
                 is 2 nothing is recomputed (jumps directly to printing
                 of source data).
 496- 570  497   PRINT CURRENTS (first computes matrix if necessary)
 571- 605  572   SORT JUNCTION CURRENTS
 606- 619  607   CALCULATE S1 AND S2 (with second RETURN at 615)
                 This is abs and angle of a complex number
 620- 872  621   FAR FIELD CALCULATION
 873-1130  875   NEAR FIELD CALCULATION
1131-1149 1133   FREQUENCY INPUT
1150-1297 1153   Geometry computation and manual input of geometry
          1155   Manual geometry input
          1190   Geometry computations
          1198   COMPUTE CONNECTIVITY DATA (PULSES N1 TO N)
          1216   COMPUTE COORDINATES OF BREAK POINTS
          1247   SINGLE SEGMEN 0 PULSE CASE
          1256   Geometry output
1298-1362 1299   CONNECTIONS
1363-1428 1364   CHANGE ENVIRONMENT
          1369   ENVIRONMENT INPUT
1429-1453 1430   EXCITATION INPUT
1454-1493 1455   LOADS INPUT
1494-1549 1497   MAIN PROGRAM
1550-1556 1550   NEC-TYPE GEOMETRY INPUT
1557-1571 1557   GET GEOMETRY DATA FROM MININEC.INP
1572-1578 1572   Below groundplane check for z coordinate
                 Note that it asks if we want to set coordinate to 0 but
                 sets it to -z (!)
1579-1588 1580   IDENTIFY OUTPUT DEVICE
1589-1598 1589   CALCULATE ELAPSED TIME [not implemented]
1599-1616 1599   CALCULATE APPROXIMATE TIME REMAINING [not implemented]
1617             END

Looks like the PSI computation has three entry points:
87  used for impedance matrix calculation
102 in image loop
54  used in near field calculation
    after setup of (X1, Y1, Z1), (X2, Y2, Z2), (V1, V2, V3) this jumps
    into the middle of the psi calculation in 135

The PSI computation uses the INTEGRALS I2 & I3 as a subroutine

Global variables
M: 1 / (4 * PI * OMEGA * EPSILON): self.m

Data structures
K!(6,2) Near-field computation H-Field real and imag part in three
        dimensions

MS=150 Maximum number of segments
X(150)
Y(150) Currently replaced by Mininec.seg
Z(150)

MW=50 Maximum number of wires
A(50)    Wire.r
A2 is squared radius
CA(50)   Wire.dirs [0]
CB(50)   Wire.dirs [1]
CG(50)   Wire.dirs [2]
J1(50)   Wire.is_ground_start, Wire.is_ground_end (uses -1, 0, +1)
J2(50,2) Start/End segment? currently Wire.j2
N(50,2)  Wire.seg_start, Wire.seg_end
S(50)    Wire.seg_len

ML=11 Maximum number of loads
MA=8 Maximum order of S-Parameter loads
LA(2,11,8) Load._impedance.real, Load._impedance.imag
           Resistance/Reactance load only uses first two dimensions (and
           sets the third to 1)
           For S-Parameter loads the first dimension is
           numerator/denominator of the S-Parameter, the last dimension
           is the k-th S-Parameter (both numerator and denominator)
           Note two succeeding S-Parameters (in the last dimension) are
           the real- and imaginary part of the *same* parameter,
           respectively. This is determined from the source code,
           unfortunately the pages documenting this in the NOSC TD 938
           report (see README.rst) are unreadable.
LP(11)     Load.pulse
LS(11)     Number of S-Parameter loads
L$         "Y" if S-Parameter loads, "N" otherwise

MM=6 Maximum number of media
NM    Number of media
H(6)  Medium.height re-used in H-field computation, that's why media
                    need to be at least 6 :-(
T(6)  Medium.dieel
U(6)  Medium.coord
V(6)  Medium.conductivity
Z1(6) Medium.impedance(self.f) (real)
Z2(6) Medium.impedance(self.f) (imag)

MP=50 Maximum number of pulses
C%(50,2)    Currently Mininec.c_per or Mininec.seg_idx (the latter has no 0s)
CI(50)      Current, Right hand side of equation (imag)
CR(50)      Current, Right hand side of equation (real)
P(50)       Pivots, not needed in Python code
W%(50)      Currently Mininec.w_per
ZR(50,50)   Z, real part
ZI(50,50)   Z, imag part

NS: Number of sources (must be below MP)

These are dimensioned to MW+MP=100
-> Not really it's 2*MW: This stores all the start positions in the
   first half and the end positions in the second half during init
-> Hmm and during computation is uses this for pulse data, then it
   should be sized with MP. Yech.
E(100) Index of pulse indexed by source (1..NS) index ("Excitation")
L(100) Complex voltage on pulse, real part
M(100) Complex voltage on pulse, imag part

Not used when computing connections, looks like the variables are
repurposed there.

NR: Number of radials in environment

Note that the Radial Distance RD doesn't have anything to do with
radials: It is the distance where the far field is measured when
printing the far field in V/m.

During Far field calculations:
AA: Azimuth angle initial
AC: Azimuth increment
NA: Azimuth number
ZA: Zenith angle initial
ZC: Zenith increment
ZA: Zenith number


Datatype suffixes microsoft basic:
% Integer
& Long
! Single (Float?!)
# Double (Float?!)

Gaussian Quadrature
===================

There are the parameters Q, an array with dimension 14.

When integrating we have a running variable L which is initialized with
either 7, 3, or 1.
This loops while L < I5. The latter is initialized to 2 * L
So when
- L==7 this uses indeces 7..14 into array Q (8 values)
- L==3 this uses indeces 3..6 into array Q  (4 values)
- L==1 this uses indeces 1..2 into array Q  (2 values)

Hmm looks like the Gauss constants (points/weights) are intermixed and
we're seeing 2-point, 4-point and 8-point versions.
2-point
- Q(1) sqrt (1/12) = 1 / (2 * sqrt (3))            Point  / 2
- Q(2) 0.5                                         Weight / 2

4-point
- Q(3) = np.sqrt (3/7 + 2/7 * np.sqrt (6/5)) / 2   Point2  / 2
- Q(4) = (18 - np.sqrt (30)) / 36 / 2              Weight2 / 2
- Q(5) = np.sqrt (3/7 - 2/7 * np.sqrt (6/5)) / 2   Point1  / 2
- Q(6) = (18 + np.sqrt (30)) / 36 / 2              Weight1 / 2

6-point
For 6-point I could only find the numeric values but they don't seem to
apply.
        weight                  x_i
1       0.3607615730481386      0.6612093864662645
2       0.3607615730481386      -0.6612093864662645
3       0.4679139345726910      -0.2386191860831969
4       0.4679139345726910      0.2386191860831969
5       0.1713244923791704      -0.9324695142031521
6       0.1713244923791704      0.9324695142031521

8-point:
        weight                  x_i
1 	0.3626837833783620 	-0.1834346424956498
2 	0.3626837833783620 	0.1834346424956498
3 	0.3137066458778873 	-0.5255324099163290
4 	0.3137066458778873 	0.5255324099163290
5 	0.2223810344533745 	-0.7966664774136267
6 	0.2223810344533745 	0.7966664774136267
7 	0.1012285362903763 	-0.9602898564975363
8 	0.1012285362903763 	0.9602898564975363

So we have
- Q(7)  Point8  / 2: 0.9602898564975363/2 = .480144928
- Q(8)  Weight7 / 2: 0.1012285362903763/2 = .050614268
- Q(9)  Point6  / 2: 0.7966664774136267/2 = .398333239
- Q(10) Weight5 / 2: 0.2223810344533745/2 = .111190517
- Q(11) Point4  / 2: 0.5255324099163290/2 = .262766205
- Q(12) Weight3 / 2: 0.3137066458778873/2 = .156853323
- Q(13) Point2  / 2: 0.1834346424956498/2 = .091717321
- Q(14) Weight1 / 2: 0.3626837833783620/2 = .181341892

So looks like the gaussian coefficients are there but divided by 2.
