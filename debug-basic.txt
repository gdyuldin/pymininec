- Change to directory with basic script
- Use the conventional way without input redirection, instruct the basic
  interpreter to read from a file instead. Be sure to pre-convert the
  file so that all newlines are replaced with carriage-returns, e.g.
  tr '\n' '\r' < dipole-01.mini > dipole-01.CR
  python3 -m pdb =pcbasic mininec.scaled.bas --input=dipole-01.CR \
    --interface=none -d
  The basic interpreter can redirect the input. Unfortunately the script 
  explicitly uses SCRN output which is not redirectable with pcbasic.
- Set breakpoint:
  break /usr/lib/python3/dist-packages/pcbasic/basic/interpreter.py:105
  or break at a certain Basic line number:
  break /usr/lib/python3/dist-packages/pcbasic/basic/interpreter.py:105, struct.unpack_from('<H', token, 2)[0] == 332
  break /usr/lib/python3/dist-packages/pcbasic/basic/interpreter.py:105, struct.unpack_from('<H', token, 2)[0] == 231
  break /usr/lib/python3/dist-packages/pcbasic/basic/interpreter.py:105, struct.unpack_from('<H', token, 2)[0] == 259
   You can make the previous breakpoint unconditional with
   condition 1
   or set a different line number to stop at
   condition 1 struct.unpack_from('<H', token, 2)[0] == 259
   Print the current (Basic) line number whenever the breakpoint is hit:
   commands 1
   p struct.unpack_from('<H', token, 2)[0]
   end

- The current line number is
  p struct.unpack_from('<H', token, 2)[0]
- Printing scalar variables:
  p self._scalars
  prints something like
  b'MS!': b'!'[b'00000c87' 70.0]
  b'MW!': b'!'[b'00002085' 20.0]
  b'ML!': b'!'[b'00003084' 11.0]
  b'MA!': b'!'[b'00000084' 8.0]
  These *does* contain the correct values. Note that a '!' was appended
  to the file name even though the basic code used MS, MW, ...
  So it seems the default in Basic is to use single precision float

  Print an individual variable:
  p self._values.from_bytes (self._scalars._vars [b'MS!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'MW!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'MP!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'J%']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'F8!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'P1!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'P2!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'P3!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'P4!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'T1!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'T2!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'U1!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'U2!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'V1!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'V2!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'X1!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'Y1!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'Z1!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'X2!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'Y2!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'Z2!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'X3!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'Y3!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'Z3!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'V1!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'V2!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'V3!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'I4%']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'I5%']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'F6!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'F7!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'F4!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'D1!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'D2!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'W2!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'T5!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'T6!']).to_value()
  p self._values.from_bytes (self._scalars._vars [b'T7!']).to_value()
  Show all variables:
  p sorted (self._scalars._vars.keys())

  Print arrays:
  Array memory usage:
  p self._memory.arrays.array_size_bytes (b'Q!')
  Dimension (created by 'DIM'):
  p self._memory.arrays.dimensions (b'Q!')
  Get the array as a python list
  p self._memory.arrays.to_list (b'Q!')
  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  p self._memory.arrays.to_list (b'J2%')
  [[0, 0], [0, 0], ...]]

